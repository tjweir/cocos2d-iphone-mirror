Steps to convert a game based on cocos2d v0.6 to v0.7


Director winSize
================

v.0.6 (old way):
    CGRect s = [[Director sharedDirector] winSize]
    int x = s.size.width;
    int y = s.size.height;

v0.7 (new way)
    CGSize s = [[Director sharedDirector] winSize]
    int x = s.width;
    int y = s.height;


Director initialization
=======================

v0.6 (old way):
- (void) applicationDidFinishLaunching:(UIApplication*)application
{

	// before creating any layer, set the landscape mode
	[[Director sharedDirector] setLandscape: YES];
	[[Director sharedDirector] setAnimationInterval:1.0/60];
	[[Director sharedDirector] setDisplayFPS:YES];

	// multiple touches or not ?
	[[Director sharedDirector] setMultipleTouchEnabled:YES];
	
	Scene *scene = [Scene node];
	
	[[Director sharedDirector] runScene: scene];
}

v0.7 (new way):
- (void) applicationDidFinishLaunching:(UIApplication*)application
{
	// NEW: Init the window
	window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
	[window setUserInteractionEnabled:YES];
	[window setMultipleTouchEnabled:YES];
	
	// Attach cocos2d to the window
    // The OpenGL context will be created here
    // DON'T call any OpenGL code (like a CocosNode)
    // before this call
	[[Director sharedDirector] attachInWindow:window];
	
	// before creating any layer, set the landscape mode
	[[Director sharedDirector] setLandscape: YES];
	
	// display FPS (useful when debugging)
	[[Director sharedDirector] setDisplayFPS:YES];
	
	// frames per second
	[[Director sharedDirector] setAnimationInterval:1.0/60];

	// NEW: Make the window visible
	[window makeKeyAndVisible];

    // IMPORTANT:
    // DON'T INSTANTIATE A COCOSNODE BEFORE THE ATTACH
    // IT WILL CRASH BECAUSE THE OPENGL CONTEXT IS NOT CREATED
	Scene *scene = [Scene node];
	
	[[Director sharedDirector] runWithScene: scene];
}


Director main loop
==================

To prevent some confusion the 'trigger main loop' selector was renamed:

v0.6 (old way):
  [[Director sharedDirector] runScene: firstScene];

v0.7 (new way):
  [[Director sharedDirector] runWithScene: firstScene];


Director constants
==================

DepthBuffer and PixelFormat constans now stars with a 'k'

v0.6 (old way):
Pixel Format constants:
    RGB565
    RGBA8

Depth buffer constants:
    DepthBufferNone
    DepthBuffer16
    DepthBuffer24

v0.7 (new way):
Pixel Format constants:
    kRGB565
    kRGBA8

Depth buffer constants:
    kDepthBufferNone
    kDepthBuffer16
    kDepthBuffer24


Director instance methods
=========================

Some Director's class methods are now instance methods

v0.6 (old way)
    [Director setPixelFormat:xxx]
    [Director setDepthBufferFormat:xxx]

v0.7 (new way)
    [[Director sharedDirector] setPixelFormat:xxx]
    [[Director sharedDirector] setDepthBufferFormat:xxx]


Director end
============

Since now it is possible to end / re-run / end / etc the Director
[Director end] doesn't quit the application.

v0.6 (old way)
    [[Director sharedDirector] end]

v0.7 (new way)
    [[Director sharedDirector] end]
	if( [[UIApplication sharedApplication] respondsToSelector:@selector(terminate)] )
		[[UIApplication sharedApplication] performSelector:@selector(terminate)];


TileMapAtlas memory
===================

v0.7 supports a read-write TileMapAtlas.
If you are not going to read/write the atlas, you might want to
free the extra used memory.

v0.6 (old way)
    TileMapAtlas *tilemap = [TileMapAtlas tileMapAtlasWithTileFile:@"tiles.png" mapFile:@"levelmap.tga" tileWidth:16 tileHeight:16];


v0.7 (new way):
    TileMapAtlas *tilemap = [TileMapAtlas tileMapAtlasWithTileFile:@"tiles.png" mapFile:@"levelmap.tga" tileWidth:16 tileHeight:16];
    [tilemap releaseMap];  // NEW SINCE v0.7

